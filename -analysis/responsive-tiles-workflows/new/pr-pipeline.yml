name: PR Pipeline

on:
  pull_request:
    branches: [master]

permissions:
  contents: read
  id-token: write
  pull-requests: write
  checks: write

jobs:
  validate-and-test:
    name: Validate and Test
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.artifact.outputs.name }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - run: npm ci
      
      - name: Check versions
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Package version: $VERSION"
          
          # Verify version.js exists and matches
          if [ -f "src/version.js" ]; then
            VERSION_JS=$(grep -o "'[0-9]\+\.[0-9]\+\.[0-9]\+'" src/version.js | tr -d "'")
            if [ "$VERSION_JS" != "$VERSION" ]; then
              echo "::error::Version mismatch: package.json ($VERSION) != version.js ($VERSION_JS)"
              exit 1
            fi
          else
            echo "::warning::src/version.js not found. Run 'npm run prepare-release' locally"
          fi
      
      - name: Run all checks
        id: checks
        run: |
          echo "::group::Linting"
          npm run lint || (echo "::error::Linting failed" && exit 1)
          echo "::endgroup::"
          
          echo "::group::Build Check"
          NODE_ENV=production npx webpack --mode=production || (echo "::error::Build check failed" && exit 1)
          echo "::endgroup::"
          
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-
            
      - name: Install Playwright
        run: npx playwright install --with-deps chromium firefox
        
      - name: Run tests
        run: |
          npx playwright test --reporter=html,github || (echo "::error::Tests failed" && exit 1)
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
          
      - name: Build for deployment
        run: npm run build
        
      - name: Set artifact name
        id: artifact
        run: |
          VERSION=$(node -p "require('./package.json').version")
          NAME="pr-build-${{ github.event.pull_request.number }}-${VERSION}-${{ github.sha }}"
          echo "name=${NAME}" >> $GITHUB_OUTPUT
          echo "Artifact name: ${NAME}"
        
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: dist/
          retention-days: 7
          
  deploy-to-dev:
    name: Deploy to Development
    needs: validate-and-test
    runs-on: ubuntu-latest
    environment: development
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.validate-and-test.outputs.artifact-name }}
          path: ./dist
          
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/423509969265/locations/global/workloadIdentityPools/gha-cldteam-pool-58a241b9/providers/gha-cldteam-provid-58a241b9"
          service_account: "geezeo-tiles@dev-digital-banno.iam.gserviceaccount.com"
          
      - uses: google-github-actions/setup-gcloud@v2
      
      - uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./dist
          destination: "dev-digital-gzo-geezeo-tiles-zwwst63n/qa/v2"
          parent: false
          process_gcloudignore: false
          
      - name: Verify deployment
        id: verify
        run: |
          echo "Verifying deployment..."
          ERRORS=0
          
          # Check index.html
          if gsutil ls "gs://dev-digital-gzo-geezeo-tiles-zwwst63n/qa/v2/index.html" > /dev/null 2>&1; then
            echo "✅ index.html deployed"
          else
            echo "❌ index.html not found"
            ERRORS=$((ERRORS + 1))
          fi
          
          # Check tiles.js
          if gsutil ls "gs://dev-digital-gzo-geezeo-tiles-zwwst63n/qa/v2/tiles.js" > /dev/null 2>&1; then
            echo "✅ tiles.js deployed"
          else
            echo "❌ tiles.js not found"
            ERRORS=$((ERRORS + 1))
          fi
          
          # Check docs
          if gsutil ls "gs://dev-digital-gzo-geezeo-tiles-zwwst63n/qa/v2/docs/index.html" > /dev/null 2>&1; then
            echo "✅ Documentation deployed"
          else
            echo "⚠️ Documentation not found (non-critical)"
          fi
          
          if [ $ERRORS -gt 0 ]; then
            echo "::error::Deployment verification failed with $ERRORS errors"
            exit 1
          fi
          
      - uses: actions/github-script@v7
        with:
          script: |
            const url = 'https://dev-digital-gzo-geezeo-tiles-zwwst63n.storage.googleapis.com/qa/v2/index.html';
            const docsUrl = 'https://dev-digital-gzo-geezeo-tiles-zwwst63n.storage.googleapis.com/qa/v2/docs/index.html';
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Development Deployment')
            );
            
            const body = `🚀 **Development Deployment Complete!**
            
            | Status | Details |
            |--------|---------|
            | Environment | Development |
            | Version | \`${{ github.event.pull_request.head.sha }}\` |
            | PR | #${{ github.event.pull_request.number }} |
            
            **URLs:**
            - 🌐 [Application](${url})
            - 📚 [Documentation](${docsUrl})
            
            **Next Steps:**
            1. Test your changes in the development environment
            2. Get PR approval from reviewers
            3. Merge to trigger staging deployment`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } 